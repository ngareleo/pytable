from enum import Enum
from pytable.utils import notNone


class Alignment(Enum):
    CENTER = "^"
    RIGHT = ">"
    LEFT = "<"


class Col:
    """
    Representation of a table column. Columns don't need to be declared expliticly.
    They can be autogenerated by including the labels on the head of the body.
    """

    default_max_width = 16
    default_align = Alignment.LEFT

    def __init__(
        self,
        label: str,
        key: str = None,
        width: int = None,
        max_width: int = None,
        align: Alignment = None,
    ) -> None:
        """
        Create a table column.
        Properties:

        `label` -- The label to display on the header.
        `width` -- Width of the column. If width is not provided it will not be wider than max-width.
        `max_width` -- Max width of a single column, Default behavior is wrapping to next line.
        `align` -- The alignment of text in the column.
        """
        self.label = label
        # Using notNone to pick up defaults during runtime
        self._max_width = notNone(max_width, Col.default_max_width)
        self._align = notNone(align, Col.default_align)
        self._width = notNone(width, self._max_width)
        self.key = key

    @property
    def align(self) -> str:
        return self._align.value

    @property
    def width(self):
        return self._width

    @width.setter
    def width(self, v):
        self._width = min(self.max_width, v)

    @property
    def max_width(self):
        return self._max_width

    @max_width.setter
    def max_width(self, v):
        if self._width == self._max_width:
            self._width = v
        self._max_width = v
